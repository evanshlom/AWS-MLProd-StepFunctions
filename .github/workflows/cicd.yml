name: Train and Deploy ML Model

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Training Image
        run: |
          docker build -f Dockerfile.train -t ml-training .
          docker tag ml-training:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo2/ml-training:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo2/ml-training:latest

      - name: Build and Push Serving Image
        run: |
          docker build -f Dockerfile.serve -t ml-serving .
          docker tag ml-serving:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo2/ml-serving:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo2/ml-serving:latest

      - name: Register ECS Task Definition
        run: |
          cat > task-definition.json << EOF
          {
            "family": "ml-training-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.ECS_TASK_ROLE_ARN }}",
            "containerDefinitions": [{
              "name": "training",
              "image": "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo2/ml-training:latest",
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/ml-training",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }]
          }
          EOF
          
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Start Step Functions Execution
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VPC_CONFIG=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0]")
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$(echo $VPC_CONFIG | jq -r .VpcId)" --query "Subnets[*].SubnetId" --output json)
          SECURITY_GROUP=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=default" --query "SecurityGroups[0].GroupId" --output text)
          
          # Create SageMaker Model
          aws sagemaker create-model \
            --model-name "ml-model-${TIMESTAMP}" \
            --primary-container Image="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/ml-serving:latest",Mode=SingleModel,Environment={MODEL_S3_PATH="s3://${{ secrets.S3_MODEL_BUCKET }}/models/model-${TIMESTAMP}.joblib"} \
            --execution-role-arn "${{ secrets.SAGEMAKER_ROLE_ARN }}"
          
          # Create Endpoint Config
          aws sagemaker create-endpoint-config \
            --endpoint-config-name "ml-config-${TIMESTAMP}" \
            --production-variants VariantName=primary,ModelName="ml-model-${TIMESTAMP}",InstanceType=ml.t2.medium,InitialInstanceCount=1
          
          # Execute Step Function
          aws stepfunctions start-execution \
            --state-machine-arn "arn:aws:states:${{ env.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:stateMachine:ml-training-pipeline" \
            --name "training-${TIMESTAMP}" \
            --input "{\"s3Bucket\":\"${{ secrets.S3_MODEL_BUCKET }}\",\"subnets\":${SUBNET_IDS},\"securityGroups\":[\"${SECURITY_GROUP}\"],\"endpointConfigName\":\"ml-config-${TIMESTAMP}\"}"